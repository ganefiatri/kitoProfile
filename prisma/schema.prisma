// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}


model user {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      account[]
  sessions      session[]
  role          role     @default(USER)
  history       history[]
}

model account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model history {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          user     @relation(fields: [userId], references: [id])
  product       product[]
}

model stores {
  id   Int    @id @default(autoincrement())
  title    String @db.VarChar(250)
  description String?
  img String?
  filename    String?
}

model product {
  id          String    @id @default(cuid())
  title       String    @unique
  description String
  price       String
  quantity    String
  image       String
  filename    String?
  createdAt   DateTime  @default(now())
  subCategory    subCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId  String?
  history     history[]
  }

model category {
  id          String    @id @default(cuid())
  name        String    @unique
  img         String?
  filename    String?
  subCategory    subCategory[]
}

model subCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  category    category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  products    product[]
}

enum role {
  USER
  ADMIN
}